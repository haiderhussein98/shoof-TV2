- name: Ensure Info.plist & Podfile (force iOS 13)
  script: |
    set -e

    # --- Info.plist ---
    PLIST="ios/Runner/Info.plist"
    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${BUNDLE_ID}" "$PLIST" || true
    /usr/libexec/PlistBuddy -c "Set :CFBundleName ${APP_NAME}" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleName string ${APP_NAME}" "$PLIST"
    /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName ${APP_NAME}" "$PLIST" || /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string ${APP_NAME}" "$PLIST"

    # --- Write a clean Podfile (iOS13 + non-modular fixes) ---
    cat > ios/Podfile <<'POD'
    platform :ios, '13.0'
    ENV['COCOAPODS_DISABLE_STATS'] = 'true'

    project 'Runner', { 'Debug' => :debug, 'Profile' => :release, 'Release' => :release }

    def flutter_root
      generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
      unless File.exist?(generated_xcode_build_settings_path)
        raise "Generated.xcconfig must exist. Run 'flutter pub get' and try again."
      end
      File.foreach(generated_xcode_build_settings_path) do |line|
        matches = line.match(/FLUTTER_ROOT\=(.*)/)
        return matches[1].strip if matches
      end
      raise "FLUTTER_ROOT not found."
    end

    require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
    flutter_ios_podfile_setup

    # ربط البودز كـ frameworks ستاتيكية لتفادي non-modular includes
    use_frameworks! :linkage => :static

    target 'Runner' do
      flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
    end

    post_install do |installer|
      installer.pods_project.targets.each do |t|
        t.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
          config.build_settings['SWIFT_VERSION'] = '5.0'
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'

          # لا تعامل التحذيرات كأخطاء واسمح بـ non-modular includes
          config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'

          # إزالة أي -Werror=non-modular-include-in-framework-module إن وُجد
          other_cflags = config.build_settings['OTHER_CFLAGS'] || []
          other_cflags = [other_cflags] unless other_cflags.is_a?(Array)
          other_cflags = other_cflags.reject { |f| f.to_s.include?('-Werror=non-modular-include-in-framework-module') }
          config.build_settings['OTHER_CFLAGS'] = other_cflags
        end
      end
    end
    POD
